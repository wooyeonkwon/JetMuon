#include <memory>
#include <mutex>
#include <array>
#include <iostream>
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/one/EDAnalyzer.h"
#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "FWCore/Utilities/interface/InputTag.h"
#include "SimDataFormats/GeneratorProducts/interface/GenEventInfoProduct.h" 
#include "DataFormats/PatCandidates/interface/Muon.h"
#include "DataFormats/PatCandidates/interface/Jet.h"
#include "DataFormats/PatCandidates/interface/PackedGenParticle.h"
#include "DataFormats/HepMCCandidate/interface/GenParticle.h"
#include "DataFormats/HepMCCandidate/interface/GenParticleFwd.h"
#include "DataFormats/JetReco/interface/GenJet.h"
#include "DataFormats/JetReco/interface/GenJetCollection.h"
#include "DataFormats/Candidate/interface/Candidate.h"
#include "DataFormats/Math/interface/LorentzVector.h"
#include "TFile.h"
#include "TTree.h"
#include <cstdlib>
#include "CommonTools/UtilAlgos/interface/TFileService.h"
#include "FWCore/ServiceRegistry/interface/Service.h"
#include "TSystem.h"

class muonJet : public edm::one::EDAnalyzer<> {
public:
  explicit muonJet(const edm::ParameterSet&);
  ~muonJet() override;

  static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);

private:
  void beginJob() override;
  void analyze(const edm::Event&, const edm::EventSetup&) override;
  void endJob() override;

  TTree* tree;

  // ----------member data ---------------------------
  edm::EDGetTokenT<pat::MuonCollection> muonToken_;
  edm::EDGetTokenT<pat::JetCollection> jetToken_;
  edm::EDGetTokenT<reco::GenParticleCollection> genParticleToken_;
  edm::EDGetTokenT<reco::GenJetCollection> genJetToken_;
  edm::EDGetTokenT<GenEventInfoProduct> generatorToken_;

  unsigned long long EventNumber;
  float GenWeight;

  std::vector<short> Muon_charge;
  std::vector<double> Muon_pt;
  std::vector<double> Muon_eta;
  std::vector<double> Muon_phi;
  std::vector<double> Muon_mass;
  std::vector<int> Muon_genPartIdx;

  std::vector<double> Jet_pt;
  std::vector<double> Jet_eta;
  std::vector<double> Jet_phi;
  std::vector<double> Jet_mass;
  std::vector<double> Jet_muEF;
  std::vector<std::vector<int>> Jet_muonIdx;
  std::vector<int> OneJet_muonIdx;
  std::vector<int> Jet_genJetIdx;
  std::vector<int> Jet_muonMultiplicity;
  

  std::vector<double> GenPart_pdgId;
  std::vector<short> GenPart_charge;
  std::vector<double> GenPart_pt;
  std::vector<double> GenPart_eta;
  std::vector<double> GenPart_phi;
  std::vector<double> GenPart_mass;

  std::vector<double> GenJet_pt;
  std::vector<double> GenJet_eta;
  std::vector<double> GenJet_phi;
  std::vector<double> GenJet_mass;
  std::vector<double> GenJet_muEF;
  std::vector<std::vector<int>> GenJet_genMuonIdx;
  std::vector<int> OneGenJet_genMuonIdx;
  std::vector<int> GenJet_muonMultiplicity;

};


muonJet::muonJet(const edm::ParameterSet& iConfig)
  : muonToken_(consumes<pat::MuonCollection>(iConfig.getParameter<edm::InputTag>("muons"))),
    jetToken_(consumes<pat::JetCollection>(iConfig.getParameter<edm::InputTag>("jets"))),
    genParticleToken_(consumes<reco::GenParticleCollection>(iConfig.getParameter<edm::InputTag>("genParticles"))),
    genJetToken_(consumes<reco::GenJetCollection>(iConfig.getParameter<edm::InputTag>("genJets"))),  
    generatorToken_(consumes<GenEventInfoProduct>(iConfig.getParameter<edm::InputTag>("generator"))){
}


muonJet::~muonJet() {
}

// ------------ method called once each job just before starting event loop  ------------
void muonJet::beginJob() {
  // Create a new TTree named "Events"
  edm::Service<TFileService> fs;
  tree = fs->make<TTree>("Events", "Events");

  
  // Add branches for the variables
  tree->Branch("EventNumber", &EventNumber, "EventNumber/l");
  tree->Branch("GenWeight", &GenWeight, "GenWeight/F");

  tree->Branch("Muon_pt", &Muon_pt);
  tree->Branch("Muon_eta", &Muon_eta);
  tree->Branch("Muon_phi", &Muon_phi);
  tree->Branch("Muon_mass", &Muon_mass);
  tree->Branch("Muon_genPartIdx", &Muon_genPartIdx);

  tree->Branch("Jet_pt", &Jet_pt);
  tree->Branch("Jet_eta", &Jet_eta);
  tree->Branch("Jet_phi", &Jet_phi);
  tree->Branch("Jet_mass", &Jet_mass);
  tree->Branch("Jet_muEF", &Jet_muEF);
  tree->Branch("Jet_muonIdx", &Jet_muonIdx);
  tree->Branch("Jet_genJetIdx", &Jet_genJetIdx);
  tree->Branch("Jet_muonMultiplicity", &Jet_muonMultiplicity);

  tree->Branch("GenPart_pdgId", &GenPart_pdgId);
  tree->Branch("GenPart_charge", &GenPart_charge);
  tree->Branch("GenPart_pt", &GenPart_pt);
  tree->Branch("GenPart_eta", &GenPart_eta);
  tree->Branch("GenPart_phi", &GenPart_phi);
  tree->Branch("GenPart_mass", &GenPart_mass);

  tree->Branch("GenJet_pt", &GenJet_pt);
  tree->Branch("GenJet_eta", &GenJet_eta);
  tree->Branch("GenJet_phi", &GenJet_phi);
  tree->Branch("GenJet_mass", &GenJet_mass);
  tree->Branch("GenJet_muEF", &GenJet_muEF);
  tree->Branch("GenJet_genMuonIdx", &GenJet_genMuonIdx);
  tree->Branch("GenJet_muonMultiplicity", &GenJet_muonMultiplicity);
}


// ------------ method called for each event  ------------
void muonJet::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup) {
  //get tokens
  edm::Handle<pat::MuonCollection> muons;
  edm::Handle<pat::JetCollection> jets;
  edm::Handle<reco::GenParticleCollection> genParticles;
  edm::Handle<reco::GenJetCollection> genJets;
  edm::Handle<GenEventInfoProduct> generator;
  iEvent.getByToken(muonToken_, muons);
  iEvent.getByToken(jetToken_, jets);
  iEvent.getByToken(genParticleToken_, genParticles);
  iEvent.getByToken(genJetToken_, genJets);
  iEvent.getByToken(generatorToken_, generator);
  
  //clear all vectors
  Muon_pt.clear();
  Muon_eta.clear();
  Muon_phi.clear();
  Muon_mass.clear();
  Muon_genPartIdx.clear();

  Jet_pt.clear();
  Jet_eta.clear();
  Jet_phi.clear();
  Jet_mass.clear();
  Jet_muEF.clear();
  Jet_muonIdx.clear();
  Jet_genJetIdx.clear();
  Jet_muonMultiplicity.clear();

  GenPart_pdgId.clear();
  GenPart_charge.clear();
  GenPart_pt.clear();
  GenPart_eta.clear();
  GenPart_phi.clear();
  GenPart_mass.clear();

  GenJet_pt.clear();
  GenJet_eta.clear();
  GenJet_phi.clear();
  GenJet_mass.clear();
  GenJet_muEF.clear();
  GenJet_genMuonIdx.clear();
  GenJet_muonMultiplicity.clear();

  //Muon
  for (const auto& muon : *muons) {
    Muon_pt.push_back(muon.pt());
    Muon_eta.push_back(muon.eta());
    Muon_phi.push_back(muon.phi());
    Muon_mass.push_back(muon.mass());

    if (muon.genParticleRef().isNonnull()) {
      Muon_genPartIdx.push_back(muon.genParticleRef().key());
    } else {
      Muon_genPartIdx.push_back(-1);
    }
  }

  // Jet
  for (const auto &jet : *jets) {
    Jet_pt.push_back(jet.pt());
    Jet_eta.push_back(jet.eta());
    Jet_phi.push_back(jet.phi());
    Jet_mass.push_back(jet.mass());
    Jet_muEF.push_back(jet.muonEnergyFraction());
    Jet_muonMultiplicity.push_back(jet.muonMultiplicity());
    // Jet muon Index mathcing
    // temp container for this jet
    OneJet_muonIdx.clear();
    //
    std::cout << "jet.numberOfDaughters :" <<jet.numberOfDaughters() << std::endl;
    if (jet.numberOfDaughters() == 0) {
    continue; 
    }
    for (size_t iDau = 0; iDau < jet.numberOfDaughters(); iDau++) {
      edm::Ptr<reco::Candidate> dauPtr = jet.daughterPtr(iDau);
      if (!dauPtr.isAvailable() || !dauPtr.isNonnull()) continue;
      const reco::Candidate* dau = dauPtr.get();
      if (std::abs(dau->pdgId()) == 13) {
        int idxMuon = -1; 
        for (size_t iMu = 0; iMu < muons->size(); iMu++) {
          const auto &candMuon = (*muons)[iMu];
          for (size_t iSrc = 0; iSrc < candMuon.numberOfSourceCandidatePtrs(); iSrc++) {
            auto srcPtr = candMuon.sourceCandidatePtr(0);
            if (!srcPtr.isAvailable() || !srcPtr.isNonnull()) {
              continue;
            }
            if (srcPtr.get() == dau) {
              idxMuon = iMu; 
              break;
            }
          }
          if (idxMuon >= 0) break;
        }

        OneJet_muonIdx.push_back(idxMuon);
      }
    }
    Jet_muonIdx.push_back(OneJet_muonIdx);
    
    // genJet mathcing
    if (jet.genJet() != nullptr) {
      int genJetIndex = -1;
      for (size_t iGJet = 0; iGJet < genJets->size(); iGJet++) {
        if (&((*genJets)[iGJet]) == jet.genJet()) {
          genJetIndex = iGJet;
          break;
        }
      }
      Jet_genJetIdx.push_back(genJetIndex);
    } else {
      Jet_genJetIdx.push_back(-1);
    }
  }

  //GenPart
  for (const auto& genPart : *genParticles) {
    GenPart_pdgId.push_back(genPart.pdgId());
    GenPart_charge.push_back(genPart.charge());
    GenPart_pt.push_back(genPart.pt());
    GenPart_eta.push_back(genPart.eta());
    GenPart_phi.push_back(genPart.phi());
    GenPart_mass.push_back(genPart.mass());
  }

  //GenJet
  std::cout << "genjet start" << std::endl;
  for (const auto &genJet : *genJets) {
    GenJet_pt.push_back(genJet.pt());
    GenJet_eta.push_back(genJet.eta());
    GenJet_phi.push_back(genJet.phi());
    GenJet_mass.push_back(genJet.mass());
    GenJet_muEF.push_back((genJet.muonEnergy()/genJet.energy()));
    GenJet_muonMultiplicity.push_back(genJet.muonMultiplicity());
    
    OneGenJet_genMuonIdx.clear();
    // temp container for this jet
    std::cout << "flag3" << std::endl;
    for (auto daughter = genJet.begin(); daughter != genJet.end(); ++daughter) {
      const reco::Candidate* constituent = &*daughter;
      const auto* dau = dynamic_cast<const pat::PackedGenParticle*>(constituent);
      std::cout << "flag3-2" << std::endl;
      if (std::abs(dau->pdgId()) == 13) {
        int idxGenPart = -1;
        for (size_t iPart = 0; iPart < *genParticles->size(); iPart++) {
          const auto &gPart = (*genParticles)[iPart];
          if (&gPart == dau) {
            idxGenPart = iPart;
            break;
          }
        }
        OneGenJet_genMuonIdx.push_back(idxGenPart);
      }
    }
//    // temp container for this jet
//    std::cout << "flag4" << std::endl;
//    auto gendaughters = genJet.getGenConstituents();
//    
//    for (auto &dau: gendaughters) {
//      std::cout << "flag3-1" << std::endl;
//      if (std::abs(dau->pdgId()) == 13) {
//        std::cout << "flag3-3" << std::endl;
//        int idxGenPart = -1;
//        std::cout << "flag3-4" << std::endl;
//        for (size_t iPart = 0; iPart < genParticles->size(); iPart++) {
//          std::cout << "flag3-5" << std::endl;
//          const auto &gPart = (*genParticles)[iPart];
//          std::cout << "flag3-6" << std::endl;     
//          if (&gPart == dau) {
//            idxGenPart = iPart;
//            break;
//          }
//        }
//        OneGenJet_genMuonIdx.push_back(idxGenPart);
//      }
//    }
    
    std::cout << "flag4" << std::endl;
    GenJet_genMuonIdx.push_back(OneGenJet_genMuonIdx);
  }
  std::cout << "genjet end" << std::endl;
  EventNumber = iEvent.id().event();
  GenWeight = generator->weight();
  std::cout << "fill start" << std::endl;
  tree->Fill();
  std::cout << "fill end" << std::endl;
}


// ------------ method called once each job just after ending the event loop  ------------
void muonJet::endJob() {
  // please remove this method if not needed
}

// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
void muonJet::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {

  edm::ParameterSetDescription desc;
  desc.add<edm::InputTag>("muons", edm::InputTag("muons"));
  desc.add<edm::InputTag>("jets", edm::InputTag("jets"));
  desc.add<edm::InputTag>("genParticles", edm::InputTag("genParticles"));
  desc.add<edm::InputTag>("genJets", edm::InputTag("genJets"));
  desc.add<edm::InputTag>("generator", edm::InputTag("generator"));
  descriptions.add("muonJet", desc);
}

//define this as a plug-in
DEFINE_FWK_MODULE(muonJet);
